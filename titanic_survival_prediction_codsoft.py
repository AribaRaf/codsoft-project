# -*- coding: utf-8 -*-
"""titanic-survival-prediction-codsoft.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/AribaRaf/5726898e0041ba8663f84717f887d695/titanic-survival-prediction-codsoft.ipynb
"""



"""importing the dependencies"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""data collection"""

# load the data from csv file to pandas data frame

titanic_data= pd.read_csv('/content/train.csv')

# printing the first five rows of the dataset
titanic_data.head()

# number of rows and colums of the dataset
titanic_data.shape

# getting some information about the data
titanic_data.info()

#to chech the nuber of missing values in the colums
titanic_data.isnull().sum()

"""handling the missing values"""

# drop the cabin column
titanic_data = titanic_data.drop('Cabin', axis=1)

#replacing the missing values in the age column with the mean values of the age
titanic_data['Age'].fillna(titanic_data['Age'].mean() , inplace=True)

#finding the most repeated value from embarked column
print(titanic_data['Embarked'].mode())

#replacing the missing data in embarked with the mode
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0] , inplace= True)





#to chech the nuber of missing values in the colums
titanic_data.isnull().sum()

"""data analysis"""

#getting some statistical measures about the dataset
titanic_data.describe()

#finding the number of people who survived and not survived
titanic_data['Survived'].value_counts()

"""data visualization

"""

sns.set()

#making a count plot for the survived column
sns.countplot(data = titanic_data, x = 'Survived')

sns.countplot(data = titanic_data, x = 'Sex')

titanic_data['Sex'].value_counts()

#number of survivors gender based
sns.countplot(data = titanic_data, x = 'Sex' , hue='Survived')

sns.countplot(data = titanic_data, x = 'Pclass' , hue= 'Survived')

"""encoding the categorical column"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

titanic_data.replace({'Sex':{'male':0 , 'female':1} , 'Embarked':{'S':0 ,'C':1 ,'Q':2}}, inplace=True)

titanic_data.head()

"""separating features and target

"""

x= titanic_data.drop(columns= ['Name','PassengerId','Ticket','Survived'] ,axis=1)
y= titanic_data['Survived']

print(x)

print(y)

"""splitting the data into training data and test data"""

x_train , x_test,y_train,y_test= train_test_split(x,y, test_size=0.2, random_state=2)

print(x.shape,x_train.shape,x_test.shape)

"""model training
logistic training model
"""

model= LogisticRegression()

model.fit(x_train , y_train)

"""model evaluation

accuracy score
"""

#accuracy on training data
x_train_prediction = model.predict(x_train)

print(x_train_prediction)

training_data_accuracy= accuracy_score(y_train,x_train_prediction)
print("the accuracy score of the training data;",training_data_accuracy)

#accuracy on test data
x_test_prediction = model.predict(x_test)

print(x_test_prediction)

test_data_accuracy= accuracy_score(y_test,x_test_prediction)
print("the accuracy score of the test data;",test_data_accuracy)